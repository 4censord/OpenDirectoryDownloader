name: Continuous Integration

on:
  push:
    # Sequence of patterns matched against refs/tags
    tags:
      - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10
    branches:
      - actions # MCO's feature branch, remove before merging
  workflow_dispatch:

defaults:
  run:
    shell: bash

jobs:
  build:

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      DOTNET_NOLOGO: 1
    
    strategy:
      matrix:
        kind: ['linux', 'windows', 'mac']
        include:
          - kind: linux
            os: ubuntu-latest
            target: linux-x64
          - kind: windows
            os: windows-latest
            target: win-x64
          - kind: mac
            os: macos-latest
            target: osx-x64

    runs-on: ${ matrix.os }

    steps:
    - name: Checkout
      uses: actions/checkout@v1

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 5.0.100

    - name: Get version info
      id: get_version
      run: echo ::set-output name=VERSION::${GITHUB_REF#refs/tags/v}
      
    - name: Build with dotnet
      run: dotnet build OpenDirectoryDownloader --configuration Release -p:Version=${{ steps.get_version.outputs.VERSION }}

    - name: Test with dotnet
      run: dotnet test OpenDirectoryDownloader --configuration Release -p:Version=${{ steps.get_version.outputs.VERSION }}


    - name: Publish with dotnet
      run: dotnet publish OpenDirectoryDownloader --configuration Release -p:Version=${{ steps.get_version.outputs.VERSION }} --framework net5.0 --runtime ${{ matrix.target }} --no-self-contained -p:PublishSingleFile=true --output ./OpenDirectoryDownloader-${{ matrix.target }}

    - name: Zipping
      uses: papeloto/action-zip@v1
      with:
        files: ./OpenDirectoryDownloader-win-x64
        dest: OpenDirectoryDownloader-win-x64.zip


    - name: Publish with dotnet (self-contained)
      run: dotnet publish OpenDirectoryDownloader --configuration Release -p:Version=${{ steps.get_version.outputs.VERSION }} --framework net5.0 --runtime ${{ matrix.target }} --self-contained=true -p:PublishSingleFile=true -p:PublishTrimmed=true -p:IncludeNativeLibrariesForSelfExtract=true --output ./OpenDirectoryDownloader-${{ matrix.target }}-self-contained

    - name: Zipping (self-contained)
      uses: papeloto/action-zip@v1
      with:
        files: ./OpenDirectoryDownloader-${{ matrix.target }}-self-contained
        dest: OpenDirectoryDownloader-${{ matrix.target }}-self-contained.zip


    - name: Upload artifact for docker job (linux only)
      if: matrix.kind == 'linux'
      uses: actions/upload-artifact@v2
      with:
        name: linux-x64
        path: |
          OpenDirectoryDownloader-${{ matrix.target }}.zip
          Dockerfile

    - name: Create release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: OpenDirectoryDownloader ${{ github.ref }}
        draft: false
        prerelease: false
        body: ${{ github.event.head_commit.message }}
        
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./OpenDirectoryDownloader-${{ matrix.target }.zip
        asset_name: OpenDirectoryDownloader-${{ matrix.target }}.zip
        asset_content_type: application/zip
        
    - name: Upload Release Asset (self-contained)
      uses: actions/upload-release-asset@v1.0.1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./OpenDirectoryDownloader-${{ matrix.target }}-self-contained.zip
        asset_name: OpenDirectoryDownloader-${{ matrix.target }}-self-contained.zip
        asset_content_type: application/zip



  docker:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact linux-x64
        uses: actions/download-artifact@v2
        with:
          name: linux-x64

      - name: Decompress artifact linux-x64
        uses: TonyBogdanov/zip@1.0
        with:
            args: unzip -qq ./OpenDirectoryDownloader-linux-x64.zip -d ./app

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1 
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get tag info
        id: tag_info
        run: echo ::set-output name=SOURCE_TAG::${GITHUB_REF#refs/tags/}
          
      - name: Build and push
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/opendirectorydownloader:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/opendirectorydownloader:${{ steps.tag_info.outputs.SOURCE_TAG }}
