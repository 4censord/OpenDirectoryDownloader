// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var calibre = Calibre.FromJson(jsonString);

namespace OpenDirectoryDownloader.CalibreResult
{
    using System;
    using System.Collections.Generic;

    using System.Globalization;
    using Newtonsoft.Json;
    using Newtonsoft.Json.Converters;

    public partial class CalibreResult
    {
        [JsonProperty("metadata")]
        public Dictionary<string, Metadatum> Metadata { get; set; }

        [JsonProperty("book_display_fields")]
        public string[] BookDisplayFields { get; set; }

        [JsonProperty("library_id")]
        public string LibraryId { get; set; }

        [JsonProperty("sortable_fields")]
        public string[][] SortableFields { get; set; }

        [JsonProperty("field_metadata")]
        public FieldMetadata FieldMetadata { get; set; }

        [JsonProperty("virtual_libraries")]
        public Dictionary<string, string> VirtualLibraries { get; set; }

        [JsonProperty("search_result")]
        public SearchResult SearchResult { get; set; }
    }

    public partial class FieldMetadata
    {
        [JsonProperty("marked")]
        public Read Marked { get; set; }

        [JsonProperty("id")]
        public Read Id { get; set; }

        [JsonProperty("rating")]
        public Read Rating { get; set; }

        [JsonProperty("formats")]
        public Authors Formats { get; set; }

        [JsonProperty("authors")]
        public Authors Authors { get; set; }

        [JsonProperty("#read")]
        public Read Read { get; set; }

        [JsonProperty("series_sort")]
        public Read SeriesSort { get; set; }

        [JsonProperty("languages")]
        public Authors Languages { get; set; }

        [JsonProperty("cover")]
        public Read Cover { get; set; }

        [JsonProperty("last_modified")]
        public LastModified LastModified { get; set; }

        [JsonProperty("size")]
        public Read Size { get; set; }

        [JsonProperty("identifiers")]
        public Authors Identifiers { get; set; }

        [JsonProperty("sort")]
        public Read Sort { get; set; }

        [JsonProperty("series_index")]
        public Read SeriesIndex { get; set; }

        [JsonProperty("title")]
        public Read Title { get; set; }

        [JsonProperty("au_map")]
        public AuMap AuMap { get; set; }

        [JsonProperty("ondevice")]
        public Read Ondevice { get; set; }

        [JsonProperty("comments")]
        public Read Comments { get; set; }

        [JsonProperty("news")]
        public Read News { get; set; }

        [JsonProperty("series")]
        public Read Series { get; set; }

        [JsonProperty("uuid")]
        public Read Uuid { get; set; }

        [JsonProperty("tags")]
        public Authors Tags { get; set; }

        [JsonProperty("pubdate")]
        public LastModified Pubdate { get; set; }

        [JsonProperty("author_sort")]
        public Read AuthorSort { get; set; }

        [JsonProperty("path")]
        public Read Path { get; set; }

        [JsonProperty("publisher")]
        public Read Publisher { get; set; }

        [JsonProperty("timestamp")]
        public LastModified Timestamp { get; set; }
    }

    public partial class AuMap
    {
        [JsonProperty("column")]
        public object Column { get; set; }

        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("datatype")]
        public string Datatype { get; set; }

        [JsonProperty("is_multiple")]
        public IsMultiple IsMultiple { get; set; }

        [JsonProperty("display")]
        public IsMultipleClass Display { get; set; }

        [JsonProperty("rec_index")]
        public long RecIndex { get; set; }

        [JsonProperty("is_csp")]
        public bool IsCsp { get; set; }

        [JsonProperty("is_category")]
        public bool IsCategory { get; set; }

        [JsonProperty("search_terms")]
        public object[] SearchTerms { get; set; }

        [JsonProperty("name")]
        public object Name { get; set; }

        [JsonProperty("is_editable")]
        public bool IsEditable { get; set; }

        [JsonProperty("is_custom")]
        public bool IsCustom { get; set; }

        [JsonProperty("table")]
        public object Table { get; set; }

        [JsonProperty("kind")]
        public Kind Kind { get; set; }
    }

    public partial class IsMultipleClass
    {
    }

    public partial class IsMultiple
    {
        [JsonProperty("cache_to_list")]
        public string CacheToList { get; set; }

        [JsonProperty("list_to_ui")]
        public string ListToUi { get; set; }

        [JsonProperty("ui_to_list")]
        public string UiToList { get; set; }
    }

    public partial class Read
    {
        [JsonProperty("column")]
        public string Column { get; set; }

        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("is_category")]
        public bool IsCategory { get; set; }

        [JsonProperty("display")]
        public IsMultipleClass Display { get; set; }

        [JsonProperty("is_csp")]
        public bool IsCsp { get; set; }

        [JsonProperty("category_sort", NullValueHandling = NullValueHandling.Ignore)]
        public string CategorySort { get; set; }

        [JsonProperty("search_terms")]
        public string[] SearchTerms { get; set; }

        [JsonProperty("datatype")]
        public string Datatype { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("is_multiple")]
        public IsMultipleClass IsMultiple { get; set; }

        [JsonProperty("link_column", NullValueHandling = NullValueHandling.Ignore)]
        public string LinkColumn { get; set; }

        [JsonProperty("is_editable")]
        public bool IsEditable { get; set; }

        [JsonProperty("is_custom")]
        public bool IsCustom { get; set; }

        [JsonProperty("rec_index", NullValueHandling = NullValueHandling.Ignore)]
        public long? RecIndex { get; set; }

        [JsonProperty("colnum", NullValueHandling = NullValueHandling.Ignore)]
        public long? Colnum { get; set; }

        [JsonProperty("table")]
        public string Table { get; set; }

        [JsonProperty("kind")]
        public Kind Kind { get; set; }
    }

    public partial class Authors
    {
        [JsonProperty("column")]
        public string Column { get; set; }

        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("datatype")]
        public string Datatype { get; set; }

        [JsonProperty("is_multiple")]
        public IsMultiple IsMultiple { get; set; }

        [JsonProperty("link_column", NullValueHandling = NullValueHandling.Ignore)]
        public string LinkColumn { get; set; }

        [JsonProperty("display")]
        public IsMultipleClass Display { get; set; }

        [JsonProperty("rec_index")]
        public long RecIndex { get; set; }

        [JsonProperty("is_csp")]
        public bool IsCsp { get; set; }

        [JsonProperty("is_category")]
        public bool IsCategory { get; set; }

        [JsonProperty("category_sort", NullValueHandling = NullValueHandling.Ignore)]
        public string CategorySort { get; set; }

        [JsonProperty("search_terms")]
        public string[] SearchTerms { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("is_editable")]
        public bool IsEditable { get; set; }

        [JsonProperty("is_custom")]
        public bool IsCustom { get; set; }

        [JsonProperty("table")]
        public string Table { get; set; }

        [JsonProperty("kind")]
        public Kind Kind { get; set; }
    }

    public partial class LastModified
    {
        [JsonProperty("column")]
        public object Column { get; set; }

        [JsonProperty("label")]
        public string Label { get; set; }

        [JsonProperty("datatype")]
        public string Datatype { get; set; }

        [JsonProperty("is_multiple")]
        public IsMultipleClass IsMultiple { get; set; }

        [JsonProperty("display")]
        public LastModifiedDisplay Display { get; set; }

        [JsonProperty("rec_index")]
        public long RecIndex { get; set; }

        [JsonProperty("is_csp")]
        public bool IsCsp { get; set; }

        [JsonProperty("is_category")]
        public bool IsCategory { get; set; }

        [JsonProperty("search_terms")]
        public string[] SearchTerms { get; set; }

        [JsonProperty("name")]
        public string Name { get; set; }

        [JsonProperty("is_editable")]
        public bool IsEditable { get; set; }

        [JsonProperty("is_custom")]
        public bool IsCustom { get; set; }

        [JsonProperty("table")]
        public object Table { get; set; }

        [JsonProperty("kind")]
        public Kind Kind { get; set; }
    }

    public partial class LastModifiedDisplay
    {
        [JsonProperty("date_format")]
        public string DateFormat { get; set; }
    }

    public partial class Metadatum
    {
        [JsonProperty("author_sort")]
        public string AuthorSort { get; set; }

        [JsonProperty("timestamp")]
        public DateTimeOffset Timestamp { get; set; }

        [JsonProperty("sort")]
        public string Sort { get; set; }

        [JsonProperty("series_index")]
        public long SeriesIndex { get; set; }

        [JsonProperty("format_sizes")]
        public Dictionary<string, long> FormatSizes { get; set; }

        [JsonProperty("formats")]
        public List<string> Formats { get; set; }

        [JsonProperty("title")]
        public string Title { get; set; }

        [JsonProperty("last_modified")]
        public DateTimeOffset LastModified { get; set; }

        [JsonProperty("uuid")]
        public Guid Uuid { get; set; }

        [JsonProperty("authors")]
        public string[] Authors { get; set; }

        [JsonProperty("comments", NullValueHandling = NullValueHandling.Ignore)]
        public string Comments { get; set; }

        [JsonProperty("publisher", NullValueHandling = NullValueHandling.Ignore)]
        public string Publisher { get; set; }

        [JsonProperty("lang_names", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, string> LangNames { get; set; }

        [JsonProperty("pubdate", NullValueHandling = NullValueHandling.Ignore)]
        public DateTimeOffset? PublishDate { get; set; }

        [JsonProperty("languages", NullValueHandling = NullValueHandling.Ignore)]
        public List<string> Languages { get; set; }

        [JsonProperty("identifiers", NullValueHandling = NullValueHandling.Ignore)]
        public Dictionary<string, string> Identifiers { get; set; }

        [JsonProperty("urls_from_identifiers", NullValueHandling = NullValueHandling.Ignore)]
        public string[][] UrlsFromIdentifiers { get; set; }

        [JsonProperty("rating", NullValueHandling = NullValueHandling.Ignore)]
        public long? Rating { get; set; }

        [JsonProperty("tags", NullValueHandling = NullValueHandling.Ignore)]
        public string[] Tags { get; set; }

        [JsonProperty("series", NullValueHandling = NullValueHandling.Ignore)]
        public string Series { get; set; }
    }

    public partial class SearchResult
    {
        [JsonProperty("base_url")]
        public string BaseUrl { get; set; }

        [JsonProperty("book_ids")]
        public long[] BookIds { get; set; }

        [JsonProperty("offset")]
        public long Offset { get; set; }

        [JsonProperty("sort")]
        public string Sort { get; set; }

        [JsonProperty("sort_order")]
        public string SortOrder { get; set; }

        [JsonProperty("total_num")]
        public long TotalNum { get; set; }

        [JsonProperty("num")]
        public long Num { get; set; }

        [JsonProperty("library_id")]
        public string LibraryId { get; set; }

        [JsonProperty("vl")]
        public string Vl { get; set; }

        [JsonProperty("query")]
        public string Query { get; set; }
    }

    public enum Kind { Category, Field };

    public enum Format { Azw3, Epub, Imp, Mobi, Pdf, Rar, Zip };

    public partial class CalibreResult
    {
        public static CalibreResult FromJson(string json) => JsonConvert.DeserializeObject<CalibreResult>(json, Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this CalibreResult self) => JsonConvert.SerializeObject(self, Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                KindConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class KindConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Kind) || t == typeof(Kind?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "category":
                    return Kind.Category;
                case "field":
                    return Kind.Field;
            }
            throw new Exception("Cannot unmarshal type Kind");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Kind)untypedValue;
            switch (value)
            {
                case Kind.Category:
                    serializer.Serialize(writer, "category");
                    return;
                case Kind.Field:
                    serializer.Serialize(writer, "field");
                    return;
            }
            throw new Exception("Cannot marshal type Kind");
        }

        public static readonly KindConverter Singleton = new KindConverter();
    }
}
